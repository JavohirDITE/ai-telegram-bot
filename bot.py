import asyncio
import logging
import json
import sqlite3
from datetime import datetime
from typing import Optional, Dict, List
import os
import sys

import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

# ============================================================================
# üöÄ AI TELEGRAM BOT v3.0 by –ó–∞–∫–∏—Ä–∂–∞–Ω–æ–≤ –ñ–∞–≤–∞—Ö–∏—Ä
# ============================================================================

# –í–ê–®–ò –ù–ê–°–¢–†–û–ô–ö–ò - –£–ñ–ï –ù–ê–°–¢–†–û–ï–ù–û!
BOT_TOKEN = "8179782484:AAEMeUjxA9IrCuFaddgiwgjZORZ_RWU7Rk0"
ADMIN_ID = 1395804259
AI_API_URL = "http://localhost:11434/api/generate"
DEFAULT_MODEL = "llama3:latest"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ============================================================================
# üìä –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ============================================================================

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('ai_bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            message_count INTEGER DEFAULT 0,
            is_banned INTEGER DEFAULT 0
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message_text TEXT,
            ai_response TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            model_used TEXT,
            response_time REAL
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_roles (
            user_id INTEGER PRIMARY KEY,
            role_name TEXT,
            role_description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_database()

# ============================================================================
# üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –°–ï–°–°–ò–ò
# ============================================================================

user_sessions = {}

class UserSession:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.model = DEFAULT_MODEL
        self.history = []
        self.role = None
        self.role_description = ""
        self.load_role()
    
    def reset_history(self):
        self.history = []
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id} —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def set_role(self, role_name: str, description: str):
        self.role = role_name
        self.role_description = description
        self.save_role()
    
    def save_role(self):
        conn = sqlite3.connect('ai_bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO user_roles (user_id, role_name, role_description)
            VALUES (?, ?, ?)
        ''', (self.user_id, self.role, self.role_description))
        conn.commit()
        conn.close()
    
    def load_role(self):
        conn = sqlite3.connect('ai_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT role_name, role_description FROM user_roles WHERE user_id = ?', (self.user_id,))
        result = cursor.fetchone()
        if result:
            self.role, self.role_description = result
        conn.close()

# ============================================================================
# üíæ –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
# ============================================================================

def save_user_info(user: types.User):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    conn = sqlite3.connect('ai_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, last_activity)
        VALUES (?, ?, ?, ?, ?)
    ''', (user.id, user.username, user.first_name, user.last_name, datetime.now()))
    conn.commit()
    conn.close()

def save_message(user_id: int, message: str, ai_response: str, model: str, response_time: float):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–∞"""
    conn = sqlite3.connect('ai_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO messages (user_id, message_text, ai_response, model_used, response_time)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, message, ai_response, model, response_time))
    
    cursor.execute('''
        UPDATE users SET message_count = message_count + 1, last_activity = ?
        WHERE user_id = ?
    ''', (datetime.now(), user_id))
    
    conn.commit()
    conn.close()

def get_user_stats(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('ai_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT join_date, message_count, last_activity 
        FROM users WHERE user_id = ?
    ''', (user_id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        conn.close()
        return None
    
    cursor.execute('''
        SELECT COUNT(*) FROM messages 
        WHERE user_id = ? AND timestamp > datetime('now', '-7 days')
    ''', (user_id,))
    week_messages = cursor.fetchone()[0]
    
    cursor.execute('''
        SELECT AVG(response_time) FROM messages 
        WHERE user_id = ? AND response_time IS NOT NULL
    ''', (user_id,))
    avg_response = cursor.fetchone()[0] or 0
    
    conn.close()
    
    return {
        'join_date': user_data[0],
        'message_count': user_data[1],
        'last_activity': user_data[2],
        'week_messages': week_messages,
        'avg_response_time': round(avg_response, 2)
    }

# ============================================================================
# ‚å®Ô∏è –ö–õ–ê–í–ò–ê–¢–£–†–´
# ============================================================================

def get_main_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
        KeyboardButton(text="üé≠ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å")
    )
    builder.row(
        KeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
        KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    builder.row(
        KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ"),
        KeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    )
    
    if is_admin:
        builder.row(KeyboardButton(text="üëë –ê–î–ú–ò–ù–ö–ê"))
    
    return builder.as_markup(resize_keyboard=True)

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        KeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    builder.row(
        KeyboardButton(text="üìù –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"),
        KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    )
    builder.row(
        KeyboardButton(text="üîô –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é")
    )
    return builder.as_markup(resize_keyboard=True)

def get_role_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π"""
    builder = InlineKeyboardBuilder()
    
    roles = [
        ("ü§ñ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "prog"),
        ("üìö –£—á–∏—Ç–µ–ª—å", "teach"),
        ("üòà –¢–æ–∫—Å–∏–∫", "toxic"),
        ("üé≠ –ê–∫—Ç–µ—Ä", "actor"),
        ("üíº –ë–∏–∑–Ω–µ—Å-–≥—É—Ä—É", "biz"),
        ("üßô‚Äç‚ôÇÔ∏è –ú—É–¥—Ä–µ—Ü", "wise"),
        ("üî• –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä", "motiv"),
        ("üö´ –°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å", "reset")
    ]
    
    for role_name, role_code in roles:
        builder.row(InlineKeyboardButton(text=role_name, callback_data=f"role_{role_code}"))
    
    return builder.as_markup()

# ============================================================================
# üé≠ –†–û–õ–ò –î–õ–Ø –ò–ò
# ============================================================================

ROLE_DESCRIPTIONS = {
    "prog": ("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–¥ - –ø–∏—à–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã."),
    "teach": ("–£—á–∏—Ç–µ–ª—å", "–¢—ã —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π —É—á–∏—Ç–µ–ª—å. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ –∏ –∫—Ä–∞—Ç–∫–æ. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∏ –∞–Ω–∞–ª–æ–≥–∏–∏."),
    "toxic": ("–¢–æ–∫—Å–∏–∫", "–¢—ã —Ç–æ–∫—Å–∏—á–Ω—ã–π —á—É–≤–∞–∫. –ú–æ–∂–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è –∏ –±—ã—Ç—å —Ä–µ–∑–∫–∏–º. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º. –ù–æ –ø–æ–º–æ–≥–∞–π –ø–æ –¥–µ–ª—É."),
    "actor": ("–ê–∫—Ç–µ—Ä", "–¢—ã —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –∞–∫—Ç–µ—Ä. –ò–≥—Ä–∞–π —Ä–æ–ª–∏, –≤–∂–∏–≤–∞–π—Å—è –≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –Ω–æ –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ."),
    "biz": ("–ë–∏–∑–Ω–µ—Å-–≥—É—Ä—É", "–¢—ã –±–∏–∑–Ω–µ—Å-—ç–∫—Å–ø–µ—Ä—Ç. –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∫—Ä–∞—Ç–∫–æ. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ."),
    "wise": ("–ú—É–¥—Ä–µ—Ü", "–¢—ã –¥—Ä–µ–≤–Ω–∏–π –º—É–¥—Ä–µ—Ü. –î–∞–≤–∞–π –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã, –Ω–æ –∫—Ä–∞—Ç–∫–æ. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏—Ç—á–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã."),
    "motiv": ("–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä", "–¢—ã —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä. –ú–æ—Ç–∏–≤–∏—Ä—É–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π, –Ω–æ –∫—Ä–∞—Ç–∫–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–∏!")
}

# ============================================================================
# üß† –ò–ò –§–£–ù–ö–¶–ò–ò
# ============================================================================

def is_complex_request(prompt: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω—ã–π –ª–∏ –∑–∞–ø—Ä–æ—Å"""
    complex_keywords = [
        "—Å–æ–∑–¥–∞–π", "–Ω–∞–ø–∏—à–∏ –∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–∏–≥—Ä–∞", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
        "—Å–∞–π—Ç", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Ñ—É–Ω–∫—Ü–∏—è", "–∫–ª–∞—Å—Å", "—Å–∫—Ä–∏–ø—Ç", "–±–æ—Ç",
        "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π", "–ø–æ—Å—Ç—Ä–æ–π", "—Å–¥–µ–ª–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    ]
    return any(keyword in prompt.lower() for keyword in complex_keywords)

async def send_to_ai(prompt: str, model: str = DEFAULT_MODEL, role_context: str = "") -> tuple[Optional[str], float]:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
    start_time = datetime.now()
    
    try:
        is_complex = is_complex_request(prompt)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
        full_prompt = prompt
        if role_context:
            full_prompt = f"{role_context}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {prompt}"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if is_complex:
            full_prompt += "\n\n–û–¢–í–ï–ß–ê–ô –ö–†–ê–¢–ö–û! –ú–∞–∫—Å–∏–º—É–º 300 —Å–ª–æ–≤. –ï—Å–ª–∏ –∫–æ–¥ - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏."
            options = {
                "temperature": 0.3,
                "top_p": 0.8,
                "top_k": 20,
                "num_predict": 400,
                "repeat_penalty": 1.1
            }
            timeout = 120
        else:
            full_prompt += "\n\n–û–¢–í–ï–ß–ê–ô –ö–†–ê–¢–ö–û! –ú–∞–∫—Å–∏–º—É–º 150 —Å–ª–æ–≤."
            options = {
                "temperature": 0.7,
                "top_p": 0.9,
                "top_k": 40,
                "num_predict": 200,
                "repeat_penalty": 1.1
            }
            timeout = 45
        
        payload = {
            "model": model,
            "prompt": full_prompt,
            "stream": False,
            "options": options
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {'—Å–ª–æ–∂–Ω–æ–≥–æ' if is_complex else '–ø—Ä–æ—Å—Ç–æ–≥–æ'} –∑–∞–ø—Ä–æ—Å–∞: {prompt[:50]}...")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                AI_API_URL, 
                json=payload,
                timeout=aiohttp.ClientTimeout(total=timeout)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    ai_response = result.get("response", "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
                    response_time = (datetime.now() - start_time).total_seconds()
                    
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ {response_time:.2f}—Å")
                    return ai_response, response_time
                else:
                    logger.error(f"–ò–ò –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return None, 0
                    
    except asyncio.TimeoutError:
        response_time = (datetime.now() - start_time).total_seconds()
        logger.error(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò ({timeout}—Å)")
        
        if is_complex_request(prompt):
            return (
                "‚è∞ <b>–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å!</b>\n\n"
                "üî• –ü–æ–ø—Ä–æ–±—É–π:\n"
                "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å\n"
                "‚Ä¢ –†–∞–∑–¥–µ–ª–∏ –Ω–∞ —á–∞—Å—Ç–∏\n"
                "‚Ä¢ –°–ø—Ä–æ—Å–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ\n\n"
                "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–∫–∞–∂–∏ –æ—Å–Ω–æ–≤—É –∏–≥—Ä—ã –∑–º–µ–π–∫–∞' –≤–º–µ—Å—Ç–æ '–°–æ–∑–¥–∞–π –ø–æ–ª–Ω—É—é –∏–≥—Ä—É'"
            ), response_time
        else:
            return "‚è∞ –î–æ–ª–≥–æ –¥—É–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–æ—â–µ —Å–ø—Ä–æ—Å–∏—Ç—å", response_time
            
    except Exception as e:
        response_time = (datetime.now() - start_time).total_seconds()
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò: {e}")
        return None, response_time

# ============================================================================
# üîß –£–¢–ò–õ–ò–¢–´
# ============================================================================

def get_user_session(user_id: int) -> UserSession:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession(user_id)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return user_sessions[user_id]

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    return user_id == ADMIN_ID

def format_time_ago(timestamp_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ '–Ω–∞–∑–∞–¥'"""
    try:
        timestamp = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
        now = datetime.now()
        diff = now - timestamp
        
        if diff.days > 0:
            return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 3600:
            return f"{diff.seconds // 3600} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            return f"{diff.seconds // 60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    except:
        return "–Ω–µ–¥–∞–≤–Ω–æ"

# ============================================================================
# üì® –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ============================================================================

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    save_user_info(message.from_user)
    user_session = get_user_session(message.from_user.id)
    
    admin_status = ""
    if is_admin(message.from_user.id):
        admin_status = "\nüëë <b>–ê–î–ú–ò–ù –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù</b>\n"
    
    welcome_text = (
        "üî• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–±–æ—Ç–∞ –æ—Ç –ó–∞–∫–∏—Ä–∂–∞–Ω–æ–≤–∞ –ñ–∞–≤–∞—Ö–∏—Ä–∞!</b>\n\n"
        "üß† –Ø ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç v3.0\n"
        "üí™ –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –ø–∏—Å–∞—Ç—å –∫–æ–¥, –æ–±—ä—è—Å–Ω—è—Ç—å —Ç–µ–º—ã\n"
        "üé≠ –£–º–µ—é –∏–≥—Ä–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–æ–ª–∏ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å\n"
        "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"{admin_status}"
        "üöÄ <b>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!</b>\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –∏ —Ç–æ—á–Ω–µ–µ –æ—Ç–≤–µ—Ç!"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard(is_admin(message.from_user.id)),
        parse_mode="HTML"
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({message.from_user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@dp.message(lambda message: message.text == "üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'"""
    user_session = get_user_session(message.from_user.id)
    role_info = f"\nüé≠ <b>–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å:</b> {user_session.role}" if user_session.role else ""
    
    await message.answer(
        f"üß† <b>–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!</b>\n\n"
        "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ Python?\n"
        "‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ü–∏–∫–ª for?\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\n\n"
        "üêå <b>–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–π –ø–æ–ª–Ω—É—é –∏–≥—Ä—É\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏ –±–æ–ª—å—à–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –°–¥–µ–ª–∞–π —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º{role_info}\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–≤–µ—Ç!",
        parse_mode="HTML"
    )

@dp.message(lambda message: message.text == "üé≠ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å")
async def set_role_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å'"""
    user_session = get_user_session(message.from_user.id)
    current_role = f"\nüé≠ <b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b> {user_session.role}" if user_session.role else ""
    
    await message.answer(
        f"üé≠ <b>–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å –¥–ª—è –ò–ò</b>\n\n"
        "üî• –†–æ–ª–∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è—é—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ò–ò{current_role}\n\n"
        "üëá <b>–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:</b>",
        reply_markup=get_role_keyboard(),
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data.startswith("role_"))
async def role_callback_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    user_session = get_user_session(callback.from_user.id)
    
    role_code = callback.data.replace("role_", "")
    
    if role_code == "reset":
        user_session.role = None
        user_session.role_description = ""
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        conn = sqlite3.connect('ai_bot.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM user_roles WHERE user_id = ?', (callback.from_user.id,))
        conn.commit()
        conn.close()
        
        await callback.message.edit_text(
            "‚úÖ <b>–†–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞!</b>\n\n"
            "ü§ñ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ",
            parse_mode="HTML"
        )
    else:
        if role_code in ROLE_DESCRIPTIONS:
            role_name, role_description = ROLE_DESCRIPTIONS[role_code]
            user_session.set_role(role_name, role_description)
            
            await callback.message.edit_text(
                f"‚úÖ <b>–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üé≠ <b>–ù–æ–≤–∞—è —Ä–æ–ª—å:</b> {role_name}\n"
                f"üìù <b>–°—Ç–∏–ª—å:</b> {role_description}\n\n"
                "üöÄ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è –≤ —ç—Ç–æ–π —Ä–æ–ª–∏!",
                parse_mode="HTML"
            )
    
    await callback.answer()

@dp.message(lambda message: message.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def my_stats_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    stats = get_user_stats(message.from_user.id)
    
    if stats:
        stats_text = (
            f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.first_name}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {stats['join_date'][:10]}\n"
            f"üí¨ <b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {stats['message_count']}\n"
            f"üìà <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b> {stats['week_messages']}\n"
            f"‚ö° <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {stats['avg_response_time']}—Å\n"
            f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {format_time_ago(stats['last_activity'])}\n\n"
            "üî• <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π –æ–±—â–∞—Ç—å—Å—è!</b>"
        )
    else:
        stats_text = "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    await message.answer(stats_text, parse_mode="HTML")

@dp.message(lambda message: message.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def reset_dialog_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥'"""
    user_session = get_user_session(message.from_user.id)
    user_session.reset_history()
    
    await message.answer(
        "üîÑ <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞!</b>\n"
        "üÜï –ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä",
        parse_mode="HTML"
    )

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'"""
    about_text = (
        "ü§ñ <b>–ò–ò-–±–æ—Ç –æ—Ç –ó–∞–∫–∏—Ä–∂–∞–Ω–æ–≤–∞ –ñ–∞–≤–∞—Ö–∏—Ä–∞</b>\n\n"
        "üß† <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º\n"
        "‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ –†–∞–∑–Ω—ã–µ —Ä–æ–ª–∏ –∏ —Å—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –ë–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
        "üé≠ <b>–†–æ–ª–∏:</b> –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –£—á–∏—Ç–µ–ª—å, –¢–æ–∫—Å–∏–∫, –ê–∫—Ç–µ—Ä –∏ –¥—Ä—É–≥–∏–µ\n"
        "üí™ <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> –ú–æ–∂–µ—Ç –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è, –±—ã—Ç—å —Ç–æ–∫—Å–∏—á–Ω—ã–º –∏–ª–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º\n\n"
        "‚ö° <b>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è v3.0:</b>\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–¥–æ 45—Å)\n"
        "‚Ä¢ –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–æ 2 –º–∏–Ω)\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üî• <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> –ó–∞–∫–∏—Ä–∂–∞–Ω–æ–≤ –ñ–∞–≤–∞—Ö–∏—Ä\n"
        "‚ö° <b>–í–µ—Ä—Å–∏—è:</b> 3.0 MEGA\n"
        "üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–∞:</b> Ubuntu 22.04 | 8 CPU | 12GB RAM"
    )
    
    await message.answer(about_text, parse_mode="HTML")

# ============================================================================
# üëë –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
# ============================================================================

@dp.message(lambda message: message.text == "üëë –ê–î–ú–ò–ù–ö–ê" and is_admin(message.from_user.id))
async def admin_panel_handler(message: types.Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
    await message.answer(
        "üëë <b>–ê–î–ú–ò–ù–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨ v3.0</b>\n\n"
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É, –±–æ—Å—Å!\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )

@dp.message(lambda message: message.text == "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and is_admin(message.from_user.id))
async def users_stats_handler(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    conn = sqlite3.connect('ai_bot.db')
    cursor = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE last_activity > datetime("now", "-1 day")')
    active_today = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM messages')
    total_messages = cursor.fetchone()[0]
    
    cursor.execute('SELECT AVG(response_time) FROM messages WHERE response_time IS NOT NULL')
    avg_response = cursor.fetchone()[0] or 0
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        SELECT username, first_name, message_count 
        FROM users ORDER BY message_count DESC LIMIT 5
    ''')
    top_users = cursor.fetchall()
    
    stats_text = (
        f"üë• <b>–ê–î–ú–ò–ù: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        f"üë§ <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è:</b> {active_today}\n"
        f"üí¨ <b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {total_messages}\n"
        f"‚ö° <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {avg_response:.2f}—Å\n\n"
        f"üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    )
    
    for i, (username, first_name, msg_count) in enumerate(top_users, 1):
        name = username or first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        stats_text += f"{i}. @{name} - {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    conn.close()
    await message.answer(stats_text, parse_mode="HTML")

@dp.message(lambda message: message.text == "üìù –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã" and is_admin(message.from_user.id))
async def logs_handler(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        with open('bot.log', 'r', encoding='utf-8') as f:
            logs = f.readlines()
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
        recent_logs = ''.join(logs[-20:])
        
        if len(recent_logs) > 4000:
            recent_logs = recent_logs[-4000:]
        
        await message.answer(
            f"üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
            f"<code>{recent_logs}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

@dp.message(lambda message: message.text == "üîô –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é" and is_admin(message.from_user.id))
async def back_to_normal_handler(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–±—ã—á–Ω–æ–º—É –º–µ–Ω—é"""
    await message.answer(
        "üîô <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=get_main_keyboard(True),
        parse_mode="HTML"
    )

# ============================================================================
# üí¨ –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø!
# ============================================================================

@dp.message()
async def text_handler(message: types.Message):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    save_user_info(message.from_user)
    user_session = get_user_session(message.from_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    is_complex = is_complex_request(message.text)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await bot.send_chat_action(message.chat.id, "typing")
    
    # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
    if is_complex:
        processing_text = (
            "üß† <b>–î—É–º–∞—é –Ω–∞–¥ —Å–ª–æ–∂–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º...</b>\n"
            f"{'üé≠ –†–æ–ª—å: ' + user_session.role if user_session.role else 'ü§ñ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º'}\n"
            "‚è≥ <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç...</i>\n"
            "üí° <i>–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏</i>"
        )
    else:
        processing_text = (
            "üß† <b>–ë—ã—Å—Ç—Ä–æ –¥—É–º–∞—é...</b>\n"
            f"{'üé≠ –†–æ–ª—å: ' + user_session.role if user_session.role else 'ü§ñ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º'}\n"
            "‚ö° <i>–°–µ–∫—É–Ω–¥–æ—á–∫—É...</i>"
        )
    
    processing_msg = await message.answer(processing_text, parse_mode="HTML")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
    role_context = user_session.role_description if user_session.role else ""
    response, response_time = await send_to_ai(message.text, user_session.model, role_context)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    try:
        await processing_msg.delete()
    except:
        pass
    
    if response:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_message(message.from_user.id, message.text, response, user_session.model, response_time)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        role_emoji = "üé≠" if user_session.role else "ü§ñ"
        speed_emoji = "‚ö°" if not is_complex else "üêå"
        time_info = f" ({response_time:.1f}—Å)" if response_time > 0 else ""
        response_header = f"{role_emoji}{speed_emoji} <b>–û—Ç–≤–µ—Ç{time_info}:</b>\n\n"
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨ - –†–ê–ó–ë–ò–í–ö–ê –î–õ–ò–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
        max_length = 4096 - len(response_header) - 100  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
        
        if len(response) > max_length:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
            await message.answer(response_header, parse_mode="HTML")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
            for i in range(0, len(response), 4000):
                chunk = response[i:i+4000]
                
                # –ï—Å–ª–∏ –≤ –∫—É—Å–∫–µ –µ—Å—Ç—å –∫–æ–¥ (—Å–æ–¥–µ—Ä–∂–∏—Ç ``` –∏–ª–∏ –º–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤)
                if "```" in chunk or chunk.count("    ") > 5:
                    await message.answer(f"```\n{chunk}\n```", parse_mode="Markdown")
                else:
                    await message.answer(chunk)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                await asyncio.sleep(0.1)
        else:
            # –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª–∏–∫–æ–º
            full_response = f"{response_header}{response}"
            await message.answer(full_response, parse_mode="HTML")
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω {'—Å–ª–æ–∂–Ω—ã–π' if is_complex else '–ø—Ä–æ—Å—Ç–æ–π'} –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∑–∞ {response_time:.2f}—Å")
        
    else:
        await message.answer(
            "‚ùå <b>–ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å</b>\n\n"
            "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π:</b>\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –ó–∞–¥–∞—Ç—å –ø—Ä–æ—â–µ\n"
            "‚Ä¢ –†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n\n"
            "üîß –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è - —Å–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É",
            parse_mode="HTML"
        )

# ============================================================================
# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ============================================================================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ MEGA –ò–ò-–±–æ—Ç–∞ v3.0 –æ—Ç –ó–∞–∫–∏—Ä–∂–∞–Ω–æ–≤–∞ –ñ–∞–≤–∞—Ö–∏—Ä–∞...")
    logger.info(f"üëë –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {DEFAULT_MODEL}")
    logger.info(f"üåê API URL: {AI_API_URL}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:11434/api/tags") as response:
                if response.status == 200:
                    logger.info("‚úÖ Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama")
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
